import{d as l,r as v,o as d,c as h,a as c,b as i,w as _,F as $,e as u,f as p,g as y,t as f,u as b,p as A,h as S,i as E,j as I,k as D,l as C,T as L,m as N,n as O,v as P,q as V}from"./vendor.62edb6d8.js";const B=function(){const r=document.createElement("link").relList;if(r&&r.supports&&r.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))t(e);new MutationObserver(e=>{for(const o of e)if(o.type==="childList")for(const a of o.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&t(a)}).observe(document,{childList:!0,subtree:!0});function s(e){const o={};return e.integrity&&(o.integrity=e.integrity),e.referrerpolicy&&(o.referrerPolicy=e.referrerpolicy),e.crossorigin==="use-credentials"?o.credentials="include":e.crossorigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function t(e){if(e.ep)return;e.ep=!0;const o=s(e);fetch(e.href,o)}};B();const R={class:"nav"},j=u("Index"),q=u("About"),z=l({setup(n){return(r,s)=>{const t=v("router-link"),e=v("router-view");return d(),h($,null,[c("div",R,[i(t,{to:"/"},{default:_(()=>[j]),_:1}),i(t,{to:"/about"},{default:_(()=>[q]),_:1})]),i(e)],64)}}}),F="modulepreload",g={},H="./",W=function(r,s){return!s||s.length===0?r():Promise.all(s.map(t=>{if(t=`${H}${t}`,t in g)return;g[t]=!0;const e=t.endsWith(".css"),o=e?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${t}"]${o}`))return;const a=document.createElement("link");if(a.rel=e?"stylesheet":F,e||(a.as="script",a.crossOrigin=""),a.href=t,document.head.appendChild(a),e)return new Promise((m,T)=>{a.addEventListener("load",m),a.addEventListener("error",T)})})).then(()=>r())};var x=(n,r)=>{const s=n.__vccOpts||n;for(const[t,e]of r)s[t]=e;return s};const k=n=>(A("data-v-a83bd3b0"),n=n(),S(),n),Y=k(()=>c("b",null,"Index",-1)),M=u(" Current ENV: "),K=u(" DY: "),U=k(()=>c("br",null,null,-1)),G=l({setup(n){const r=".env.prod";let s=p(0);function t(o){alert(o)}function e(){s.value++}return y(()=>{}),(o,a)=>(d(),h("div",null,[Y,c("p",null,[M,c("b",null,f(b(r)),1)]),c("p",null,[K,c("b",null,f(b(s)),1)]),c("button",{onClick:a[0]||(a[0]=m=>t("button"))},"Alert"),U,c("button",{onClick:e},"ADD DY")]))}});var J=x(G,[["__scopeId","data-v-a83bd3b0"]]);const Q=[{path:"/",name:"Home",component:J},{path:"/about",name:"About",component:()=>W(()=>import("./About.e86f74d5.js"),["public/About.e86f74d5.js","public/vendor.62edb6d8.js"])}],X=E({history:I(),routes:Q}),Z=32;function w(){const n=document.documentElement.clientWidth/750;document.documentElement.style.fontSize=Z*Math.min(n,2)+"px"}w();window.onresize=function(){w()};const ee={class:"Toast"},te={class:"Toast-content"},oe=l({props:{message:{type:String,default:"\u63D0\u793A"},duration:{type:Number,default:3e3}},setup(n){const r=n,s=p(!1),t=p(0);return y(()=>{s.value=!0,t.value=setTimeout(()=>{s.value=!1},r.duration)}),D(()=>{clearTimeout(t.value)}),(e,o)=>(d(),C(N,{to:"body"},[i(L,null,{default:_(()=>[O(c("div",ee,[c("div",te,f(r.message),1)],512),[[P,s.value]])]),_:1})]))}});var ne=x(oe,[["__scopeId","data-v-0321d2b2"]]);const se={install:n=>{n.component("Toast",ne)}},re=V(z);re.use(X).use(se).mount("#app");export{x as _};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
